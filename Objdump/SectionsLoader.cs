using System;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;

namespace DebugOS.Loaders.Objdump
{
    public static class SectionsLoader
    {
        // String indicating the start of the section table
        const string TableStart = "Sections:";

        const string addr = @"([\da-fA-F]+)\s*";

        static readonly Regex sectionRegex1 = new Regex(
            @"\s*(\d+) \.([\w_\.]+)\s*" + addr + addr + addr + addr + @"(\d+)\*\*(\d+)");

        static readonly Regex sectionRegex2 = new Regex(@"\s+(\w+),?");

        public static Section[] Load(StreamReader stream)
        {
            /* 
             * This function uses regexes to match against the section output
             * generated by objdump.
             */
            string line;
            bool   start = false;

            // Skip until start of section table found
            while ((line = stream.ReadLine()) != null)
            {
                if (!start) {
                    if (line == TableStart) start = true;  // Found title
                }
                else break; // Skip headers
            }

            int index   = 0;
            var entries = new List<Section>();

            string name   = null;
            int    align  = -1;
            long   size   = 0, vmaddr = 0;
            long   offset = 0, lmaddr = 0;

            while ((line = stream.ReadLine()) != null)
            {
                if (index % 2 == 0)
                {
                    Match match = sectionRegex1.Match(line);
                    if (!match.Success) break;

                    name   = match.Groups[2].Value;
                    size   = (long)Utils.ParseHex64(match.Groups[3].Value);
                    vmaddr = (long)Utils.ParseHex64(match.Groups[4].Value);
                    lmaddr = (long)Utils.ParseHex64(match.Groups[5].Value);
                    offset = (long)Utils.ParseHex64(match.Groups[6].Value);

                    align = Utils.Pow(int.Parse(match.Groups[7].Value), int.Parse(match.Groups[8].Value));
                }
                else
                {
                    MatchCollection matches = sectionRegex2.Matches(line);
                    SectionFlags    flags   = 0;

                    if (matches.Count != 0)
                    {
                        foreach (Match match in matches)
                        {
                            flags |= (SectionFlags)Enum.Parse(typeof(SectionFlags), 
                                match.Groups[1].Value, true);
                        }
                    }

                    entries.Add(new Section((index - 1) / 2, name, size, 
                        vmaddr, lmaddr, offset, align, flags));
                }
                index++;
            }
            return entries.ToArray();
        }
    }
}
